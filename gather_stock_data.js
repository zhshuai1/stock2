function getLogger(name){
    var Log4js = require('log4js'); 
    Log4js.configure("./log4js.json");
    var logger = Log4js.getLogger(name);   
    return logger;
}

function getPersister(){
    var mysql = require('mysql'); 
    var logger=getLogger("getPersister");
    var connection = mysql.createConnection({
        host: '192.168.31.185',
        user: 'zhangsh',  
        password: '000000',
        database: 'stock'
    });  
    connection.connect();
    
    var insert=function(entry){
        logger.info("Inserting entry to db: ",entry);
        connection.query('INSERT INTO Stocks (code,open,close,high,low,year,month,day,date,delta,volume) values (?,?,?,?,?,?,?,?,?,?,?);',entry, 
        function (err, results, fields) {  
            if (err){  
                throw err;  
            } 
            logger.info("The insert result is: ",results);
        }); 
    }
    var update=function(entry){
        logger.info("Updating entry to db: ",entry);
        connection.query('Update Stocks set code=?,open=?,close=?,high=?,low=?,year=?,month=?,day=?,date=?,delta=?,volume=? where code=? and year=? and month=? and day=?;',entry, 
        function (err, results, fields) {  
            if (err){  
                throw err;  
            } 
            logger.info("The update result is: ",results);
        }); 
    }
    var persister={
        persist:function(code,entry){
            var date=entry.date;
            var params=[code,
                entry.open,
                entry.close,
                entry.high,
                entry.low,
                date.getYear(),
                date.getMonth(),
                date.getDate(),
                date,
                entry.delta,
                entry.volume
            ];
            logger.info("Add a record for this stock: ",params);
            insert(params);
            return;
            connection.query("SELECT * FROM Stocks where code=? and year=? and month=? and day=?;",[code,date.getYear(),date.getMonth(),date.getDate()], 
            function (err, results, fields) {  
                if (err){  
                    throw err;  
                } 
                if(results){
                    logger.info("The records in db are: ",results);
                    if(results.length==0){
                        logger.info("Add a record for this stock: ",params);
                        insert(params);
                    }else if(results.length==1){
                        logger.info("The record has alread exist in the db.");
                        var update_params=params.slice();
                        update_params.push(code,date.getYear(),date.getMonth(),date.getDate());
                        update(update_params);
                    }else{
                        logger.error("Duplicated records in the system.");
                    }
                }
            }); 
            
        },
        destroy:function(){    
            connection.end(); 
        },
        // used to persist the latest $num histories
        persistHistories:function(code,histories,num){
            var length=histories.length;
            logger.info("The size of the history of this stock is: ",code,length);
            for(var i=length-1;i>length-num&&i>0;--i){
                var history=histories[i];
                logger.info("Persister is persisting the entry: ",code,history);
                history.delta=(i>0?(histories[i].close-histories[i-1].close)/histories[i-1].close:(histories[i].close-histories[i].open)/histories[i].open)*100;
                this.persist(code,history);
            }
        },
        checkOnceAndPersist:function(code,histories,num){
            var p=this;
            connection.query("SELECT * FROM Stocks where code=?;",[code], 
            function (err, results, fields) {  
                if (err){  
                    throw err;  
                } 
                if(results){
                    if(results.length==0){
                        logger.info("Add histories for this stock: ",code);
                        p.persistHistories(code,histories,num);
                    }else{
                        logger.error("Stock has existed in db",code);
                    }
                }
            }); 
        }
    };
    return persister;
}


function getGatherer(){   
    var logger=getLogger("getGatherer"); 
    var decodeData=function(t){
        var e,
        n,
        r,
        i,
        a,
        o,
        s,
        l = 86400000,
        u = 7657,
        c = [
        ],
        d = [
        ],
        h = ~(3 << 30),
        f = 1 << 30,
        p = [
            0,
            3,
            5,
            6,
            9,
            10,
            12,
            15,
            17,
            18,
            20,
            23,
            24,
            27,
            29,
            30
        ],
        m = Math,
        g = function () {
            var l,
            u;
            for (l = 0; 64 > l; l++) d[l] = m.pow(2, l),
            26 > l && (c[l] = v(l + 65), c[l + 26] = v(l + 97), 10 > l && (c[l + 52] = v(l + 48)));
            for (c.push('+', '/'), c = c.join(''), n = t.split(''), r = n.length, l = 0; r > l; l++) n[l] = c.indexOf(n[l]);
            return i = {
            },
            e = o = 0,
            a = {
            },
            u = w([12,
            6]),
            s = 63 ^ u[1],
            {
                _1479: C,
                _136: A,
                _200: T,
                _139: _,
                _197: S
            }
            [
                '_' + u[0]
            ] || function () {
                return []
            }
        },
        v = String.fromCharCode,
        b = function (t) {
            return t === {
            }._
        },
        y = function () {
            var t,
            e;
            for (t = N(), e = 1; ; ) {
                if (!N()) return e * (2 * t - 1);
                e++
            }
        },
        N = function () {
            var t;
            return e >= r ? 0 : (t = n[e] & 1 << o, o++, o >= 6 && (o -= 6, e++), !!t)
        },
        w = function (t, i, a) {
            var s,
            l,
            u,
            c,
            h;
            for (l = [
            ], u = 0, i || (i = [
            ]), a || (a = [
            ]), s = 0; s < t.length; s++) if (c = t[s], u = 0, c) {
                if (e >= r) return l;
                if (t[s] <= 0) u = 0;
                 else if (t[s] <= 30) {
                    for (; h = 6 - o, h = c > h ? h : c, u |= (n[e] >> o & (1 << h) - 1) << t[s] - c, o += h, o >= 6 && (o -= 6, e++), c -= h, !(0 >= c); );
                    i[s] && u >= d[t[s] - 1] && (u -= d[t[s]])
                } else u = w([30,
                t[s] - 30], [
                    0,
                    i[s]
                ]),
                a[s] || (u = u[0] + u[1] * d[30]);
                l[s] = u
            } else l[s] = 0;
            return l
        },
        x = function (t) {
            var e,
            n,
            r,
            a;
            for (t > 1 && (e = 0), e = 0; t > e; e++) i.d++,
            r = i.d % 7,
            (3 == r || 4 == r) && (i.d += 5 - r);
            return n = new Date,
            a = 60 * n.getTimezoneOffset() * 1000,
            n.setTime((u + i.d) * l + a),
            n.setHours(n.getHours() + 8),
            n
        },
        T = function () {
            var t,
            n,
            a,
            o,
            l;
            if (s >= 1) return [];
            for (i.d = w([18], [
                1
            ]) [0] - 1, a = w([3,
            3,
            30,
            6]), i.p = a[0], i.ld = a[1], i.cd = a[2], i.c = a[3], i.m = m.pow(10, i.p), i.pc = i.cd / i.m, n = [
            ], t = 0; o = {
                d: 1
            }, N() && (a = w([3]) [0], 0 == a ? o.d = w([6]) [0] : 1 == a ? (i.d = w([18]) [0], o.d = 0)  : o.d = a), l = {
                date: x(o.d)
            }, N() && (i.ld += y()), a = w([3 * i.ld], [
                1
            ]), i.cd += a[0], l.close = i.cd / i.m, n.push(l), !(e >= r) && (e != r - 1 || 63 & (i.c ^ t + 1)); t++);
            return n[0].prevclose = i.pc,
            n
        },
        A = function () {
            var t,
            n,
            a,
            o,
            l,
            u,
            c,
            d,
            h,
            f,
            p;
            if (s >= 2) return [];
            for (c = [
            ], h = {
                v: 'volume',
                p: 'price',
                a: 'avg_price'
            }, i.d = w([18], [
                1
            ]) [0] - 1, d = {
                date: x(1)
            }, a = w(1 > s ? [
                3,
                3,
                4,
                1,
                1,
                1,
                5
            ] : [
                4,
                4,
                4,
                1,
                1,
                1,
                3
            ]), t = 0; 7 > t; t++) i[['la',
            'lp',
            'lv',
            'tv',
            'rv',
            'zv',
            'pp'][t]] = a[t];
            for (i.m = m.pow(10, i.pp), s >= 1 ? (a = w([3,
            3]), i.c = a[0], a = a[1])  : (a = 5, i.c = 2), i.pc = w([6 * a]) [0], d.pc = i.pc / i.m, i.cp = i.pc, i.da = 0, i.sa = i.sv = 0, t = 0; !(e >= r) && (e != r - 1 || 7 & (i.c ^ t)); t++) {
                for (l = {
                }, o = {
                }, f = i.tv ? N()  : 1, n = 0; 3 > n; n++) if (p = [
                    'v',
                    'p',
                    'a'
                ][n], (f ? N()  : 0) && (a = y(), i['l' + p] += a), u = 'v' == p && i.rv ? N()  : 1, a = w([3 * i['l' + p] + ('v' == p ? 7 * u : 0)], [
                    !!n
                ]) [0] * (u ? 1 : 100), o[p] = a, 'v' == p) {
                    if (!(l[h[p]] = a) && 241 > t && (i.zv ? !N()  : 1)) {
                        o.p = 0;
                        break
                    }
                } else 'a' == p && (i.da = (1 > s ? 0 : i.da) + o.a);
                i.sv += o.v,
                l[h.p] = (i.cp += o.p) / i.m,
                i.sa += o.v * i.cp,
                l[h.a] = b(o.a) ? t ? c[t - 1][h.a] : l[h.p] : i.sv ? ((m.floor((i.sa * (2000 / i.m) + i.sv) / i.sv) >> 1) + i.da) / 1000 : l[h.p] + i.da / 1000,
                c.push(l)
            }
            return c[0].date = d.date,
            c[0].prevclose = d.pc,
            c
        },
        C = function () {
            var t,
            e,
            n,
            r,
            a,
            o,
            l;
            if (s >= 1) return [];
            for (i.lv = 0, i.ld = 0, i.cd = 0, i.cv = [
                0,
                0
            ], i.p = w([6]) [0], i.d = w([18], [
                1
            ]) [0] - 1, i.m = m.pow(10, i.p), a = w([3,
            3]), i.md = a[0], i.mv = a[1], t = [
            ]; a = w([6]), a.length; ) {
                if (n = {
                    c: a[0]
                }, r = {
                }, n.d = 1, 32 & n.c) for (; ; ) {
                    if (a = w([6]) [0], 63 == (16 | a)) {
                        l = 16 & a ? 'x' : 'u',
                        a = w([3,
                        3]),
                        n[l + '_d'] = a[0] + i.md,
                        n[l + '_v'] = a[1] + i.mv;
                        break
                    }
                    if (32 & a) {
                        o = 8 & a ? 'd' : 'v',
                        l = 16 & a ? 'x' : 'u',
                        n[l + '_' + o] = (7 & a) + i['m' + o];
                        break
                    }
                    if (o = 15 & a, 0 == o ? n.d = w([6]) [0] : 1 == o ? (i.d = o = w([18]) [0], n.d = 0)  : n.d = o, !(16 & a)) break
                }
                r.date = x(n.d);
                for (o in {
                    v: 0,
                    d: 0
                }) b(n['x_' + o]) || (i['l' + o] = n['x_' + o]),
                b(n['u_' + o]) && (n['u_' + o] = i['l' + o]);
                for (n.l_l = [
                    n.u_d,
                    n.u_d,
                    n.u_d,
                    n.u_d,
                    n.u_v
                ], l = p[15 & n.c], 1 & n.u_v && (l = 31 - l), 16 & n.c && (n.l_l[4] += 2), e = 0; 5 > e; e++) l & 1 << 4 - e && n.l_l[e]++,
                n.l_l[e] *= 3;
                n.d_v = w(n.l_l, [
                    1,
                    0,
                    0,
                    1,
                    1
                ], [
                    0,
                    0,
                    0,
                    0,
                    1
                ]),
                o = i.cd + n.d_v[0],
                r.open = o / i.m,
                r.high = (o + n.d_v[1]) / i.m,
                r.low = (o - n.d_v[2]) / i.m,
                r.close = (o + n.d_v[3]) / i.m,
                a = n.d_v[4],
                'number' == typeof a && (a = [
                    a,
                    a >= 0 ? 0 : - 1
                ]),
                i.cd = o + n.d_v[3],
                l = i.cv[0] + a[0],
                i.cv = [
                    l & h,
                    i.cv[1] + a[1] + !!((i.cv[0] & h) + (a[0] & h) & f)
                ],
                r.volume = (i.cv[0] & f - 1) + i.cv[1] * f,
                t.push(r)
            }
            return t
        },
        _ = function () {
            var t,
            e,
            n,
            r;
            if (s > 1) return [];
            for (i.l = 0, r = - 1, i.d = w([18]) [0] - 1, n = w([18]) [0]; i.d < n; ) e = x(1),
            0 >= r ? (N() && (i.l += y()), r = w([3 * i.l], [
                0
            ]) [0] + 1, t || (t = [
                e
            ], r--))  : t.push(e),
            r--;
            return t
        },
        S = function () {
            var t,
            n,
            a,
            o;
            if (s >= 1) return [];
            for (i.f = w([6]) [0], i.c = w([6]) [0], a = [
            ], i.dv = [
            ], i.dl = [
            ], t = 0; t < i.f; t++) i.dv[t] = 0,
            i.dl[t] = 0;
            for (t = 0; !(e >= r) && (e != r - 1 || 7 & (i.c ^ t)); t++) {
                for (o = [
                ], n = 0; n < i.f; n++) N() && (i.dl[n] += y()),
                i.dv[n] += w([3 * i.dl[n]], [
                    1
                ]) [0],
                o[n] = i.dv[n];
                a.push(o)
            }
            return a
        };
        return g() ()
    }	
    var Http=require("http"),
    Url= require("url");
	var gatherer={
	    getHistories:function(code,handle){
	        var options={
                host: "finance.sina.com.cn",
		        port: 80,
		        path: "/realstock/company/sh"+code+"/hisdata/klc_kl.js",
		        method: "GET"
            };
            
            var histories;
            var req = Http.request(options, function(res) {
                var data='';
		        res.on('data', function(chunk){
			        data += chunk;
		        }).on('end', function(){
		            var matched=/="([0-9a-zA-Z\+\/]+)"/.exec(data);
		            if(matched==null) {logger.info("The returned data is "+data+", but not matched"); return null;}
		            histories=decodeData(matched[1]);
		            logger.info("The decoded for result is: ",code,histories);
		            handle(histories); 
		        });
	        }).on('error', function(e) {
		        logger.info("Failed to get and decodeData for stock: ",code,e);
	        });
	        req.end();	   
	    }
	};
	return gatherer;
}


function gatherData(){
    var Sleep=require('sleep');
    var logger=getLogger("gatherData");
    var persister=getPersister(); 
    var gatherer=getGatherer();
    var stocks2=['166105','201000','201001','201002','201003','201004','201005','201008','201009','201010','202001','202003','202007','203007','203008','203009','203016','203017','203018','203019','203020','203021','203031','203032','203033','203040','203041','203042','203043','203044','203045','203049','203050','203051','203052','203053','203054','204001','204002','204003','204004','204007','204014','204028','204091','204182','500001','500002','500003','500005','500006','500007','500008','500009','500011','500015','500018','500029','500038','500056','500058','501000','501001','501002','501005','501015','501017','501018','501021','502000','502001','502002','502003','502004','502005','502006','502007','502008','502010','502011','502012','502013','502014','502015','502016','502017','502018','502020','502021','502022','502023','502024','502025','502026','502027','502028','502031','502032','502036','502037','502038','502040','502041','502042','502048','502049','502050','502053','502054','502055','502056','502057','502058','505888','510010','510020','510030','510050','510060','510061','510070','510090','510110','510120','510130','510150','510160','510170','510180','510190','510210','510220','510230','510260','510270','510280','510290','510300','510310','510330','510360','510410','510420','510430','510440','510450','510500','510510','510520','510560','510580','510610','510620','510630','510650','510660','510680','510700','510710','510810','510880','510900','511010','511210','511220','511600','511660','511680','511800','511810','511820','511830','511850','511860','511880','511890','511900','511910','511920','511930','511960','511970','511980','511990','512000','512010','512070','512110','512120','512210','512220','512230','512300','512310','512330','512340','512500','512510','512600','512610','512640','512810','512990','513030','513100','513500','513600','513660','518800','518880','580012','580013','580014','580016','580017','580019','580020','580021','580022','580023','580024','580025','580026','580027','600000','600001','600002','600003','600004','600005','600006','600007','600008','600009','600010','600011','600012','600015','600016','600017','600018','600019','600020','600021','600022','600023','600026','600027','600028','600029','600030','600031','600033','600035','600036','600037','600038','600039','600048','600050','600051','600052','600053','600054','600055','600056','600057','600058','600059','600060','600061','600062','600063','600064','600065','600066','600067','600068','600069','600070','600071','600072','600073','600074','600075','600076','600077','600078','600079','600080','600081','600082','600083','600084','600085','600086','600087','600088','600089','600090','600091','600092','600093','600094','600095','600096','600097','600098','600099','600100','600101','600102','600103','600104','600105','600106','600107','600108','600109','600110','600111','600112','600113','600114','600115','600116','600117','600118','600119','600120','600121','600122','600123','600125','600126','600127','600128','600129','600130','600131','600132','600133','600135','600136','600137','600138','600139','600141','600143','600145','600146','600148','600149','600150','600151','600152','600153','600155','600156','600157','600158','600159','600160','600161','600162','600163','600165','600166','600167','600168','600169','600170','600171','600172','600173','600175','600176','600177','600178','600179','600180','600181','600182','600183','600184','600185','600186','600187','600188','600189','600190','600191','600192','600193','600195','600196','600197','600198','600199','600200','600201','600202','600203','600205','600206','600207','600208','600209','600210','600211','600212','600213','600215','600216','600217','600218','600219','600220','600221','600222','600223','600225','600226','600227','600228','600229','600230','600231','600232','600233','600234','600235','600236','600237','600238','600239','600240','600241','600242','600243','600246','600247','600248','600249','600250','600251','600252','600253','600255','600256','600257','600258','600259','600260','600261','600262','600263','600265','600266','600267','600268','600269','600270','600271','600272','600273','600275','600276','600277','600278','600279','600280','600281','600282','600283','600284','600285','600286','600287','600288','600289','600290','600291','600292','600293','600295','600296','600297','600298','600299','600300','600301','600302','600303','600305','600306','600307','600308','600309','600310','600311','600312','600313','600315','600316','600317','600318','600319','600320','600321','600322','600323','600325','600326','600327','600328','600329','600330','600331','600332','600333','600335','600336','600337','600338','600339','600340','600343','600345','600346','600348','600349','600350','600351','600352','600353','600354','600355','600356','600357','600358','600359','600360','600361','600362','600363','600365','600366','600367','600368','600369','600370','600371','600372','600373','600375','600376','600377','600378','600379','600380','600381','600382','600383','600385','600386','600387','600388','600389','600390','600391','600392','600393','600395','600396','600397','600398','600399','600400','600401','600403','600405','600406','600408','600409','600410','600415','600416','600418','600419','600420','600421','600422','600423','600425','600426','600428','600429','600432','600433','600435','600436','600438','600439','600444','600446','600448','600449','600452','600455','600456','600458','600459','600460','600461','600462','600463','600466','600467','600468','600469','600470','600472','600475','600476','600477','600478','600479','600480','600481','600482','600483','600485','600486','600487','600488','600489','600490','600491','600493','600495','600496','600497','600498','600499','600500','600501','600502','600503','600505','600506','600507','600508','600509','600510','600511','600512','600513','600515','600516','600517','600518','600519','600520','600521','600522','600523','600525','600526','600527','600528','600529','600530','600531','600532','600533','600535','600536','600537','600538','600539','600540','600543','600545','600546','600547','600548','600549','600550','600551','600552','600553','600555','600556','600557','600558','600559','600560','600561','600562','600563','600565','600566','600567','600568','600569','600570','600571','600572','600573','600575','600576','600577','600578','600579','600580','600581','600582','600583','600584','600585','600586','600587','600588','600589','600590','600591','600592','600593','600594','600595','600596','600597','600598','600599','600600','600601','600602','600603','600604','600605','600606','600607','600608','600609','600610','600611','600612','600613','600614','600615','600616','600617','600618','600619','600620','600621','600622','600623','600624','600625','600626','600627','600628','600629','600630','600631','600632','600633','600634','600635','600636','600637','600638','600639','600640','600641','600642','600643','600644','600645','600646','600647','600648','600649','600650','600651','600652','600653','600654','600655','600656','600657','600658','600659','600660','600661','600662','600663','600664','600665','600666','600667','600668','600669','600670','600671','600672','600673','600674','600675','600676','600677','600678','600679','600680','600681','600682','600683','600684','600685','600686','600687','600688','600689','600690','600691','600692','600693','600694','600695','600696','600697','600698','600699','600700','600701','600702','600703','600704','600705','600706','600707','600708','600709','600710','600711','600712','600713','600714','600715','600716','600717','600718','600719','600720','600721','600722','600723','600724','600725','600726','600727','600728','600729','600730','600731','600732','600733','600734','600735','600736','600737','600738','600739','600740','600741','600742','600743','600744','600745','600746','600747','600748','600749','600750','600751','600752','600753','600754','600755','600756','600757','600758','600759','600760','600761','600762','600763','600764','600765','600766','600767','600768','600769','600770','600771','600772','600773','600774','600775','600776','600777','600778','600779','600780','600781','600782','600783','600784','600785','600786','600787','600788','600789','600790','600791','600792','600793','600794','600795','600796','600797','600798','600799','600800','600801','600802','600803','600804','600805','600806','600807','600808','600809','600810','600811','600812','600813','600814','600815','600816','600817','600818','600819','600820','600821','600822','600823','600824','600825','600826','600827','600828','600829','600830','600831','600832','600833','600834','600835','600836','600837','600838','600839','600840','600841','600842','600843','600844','600845','600846','600847','600848','600849','600850','600851','600852','600853','600854','600855','600856','600857','600858','600859','600860','600861','600862','600863','600864','600865','600866','600867','600868','600869','600870','600871','600872','600873','600874','600875','600876','600877','600878','600879','600880','600881','600882','600883','600884','600885','600886','600887','600888','600889','600890','600891','600892','600893','600894','600895','600896','600897','600898','600899','600900','600908','600917','600919','600926','600936','600958','600959','600960','600961','600962','600963','600965','600966','600967','600969','600970','600971','600973','600975','600976','600977','600978','600979','600980','600981','600982','600983','600984','600985','600986','600987','600988','600990','600991','600992','600993','600995','600997','600998','600999','601000','601001','601002','601003','601005','601006','601007','601008','601009','601010','601011','601012','601015','601016','601018','601020','601021','601028','601038','601058','601069','601088','601098','601099','601100','601101','601106','601107','601111','601113','601116','601117','601118','601126','601127','601128','601137','601139','601155','601158','601163','601166','601168','601169','601177','601179','601186','601188','601198','601199','601206','601208','601211','601216','601218','601222','601225','601226','601229','601231','601233','601238','601258','601268','601288','601299','601311','601313','601318','601328','601333','601336','601339','601368','601369','601377','601388','601390','601398','601500','601515','601518','601519','601555','601558','601566','601567','601579','601588','601595','601599','601600','601601','601607','601608','601611','601616','601618','601628','601633','601636','601666','601668','601669','601677','601678','601688','601689','601699','601700','601717','601718','601727','601766','601777','601788','601789','601798','601799','601800','601801','601808','601811','601818','601857','601866','601872','601877','601880','601886','601888','601890','601898','601899','601900','601901','601908','601918','601919','601928','601929','601933','601939','601958','601965','601966','601968','601969','601985','601988','601989','601991','601992','601996','601997','601998','601999','603000','603001','603002','603003','603005','603006','603007','603008','603009','603010','603011','603012','603015','603016','603017','603018','603019','603020','603021','603022','603023','603025','603026','603027','603028','603029','603030','603031','603066','603067','603069','603077','603085','603088','603090','603099','603100','603101','603108','603111','603116','603117','603118','603123','603126','603128','603131','603158','603159','603160','603166','603167','603168','603169','603188','603189','603198','603199','603222','603223','603227','603258','603268','603288','603299','603300','603306','603308','603309','603311','603313','603315','603318','603322','603328','603333','603338','603339','603355','603366','603368','603369','603377','603393','603398','603399','603421','603456','603508','603515','603518','603519','603520','603528','603555','603558','603566','603567','603568','603569','603588','603589','603598','603599','603600','603601','603606','603608','603609','603611','603616','603618','603636','603658','603663','603667','603669','603678','603686','603688','603696','603698','603699','603701','603703','603718','603726','603729','603737','603738','603766','603777','603778','603779','603788','603789','603798','603799','603800','603806','603808','603816','603818','603822','603828','603838','603843','603859','603861','603866','603868','603869','603883','603885','603887','603889','603898','603899','603901','603909','603918','603919','603936','603939','603958','603959','603968','603969','603977','603979','603986','603988','603989','603993','603996','603997','603998','603999','900901','900902','900903','900904','900905','900906','900907','900908','900909','900910','900911','900912','900913','900914','900915','900916','900917','900918','900919','900920','900921','900922','900923','900924','900925','900926','900927','900928','900929','900930','900931','900932','900933','900934','900935','900936','900937','900938','900939','900940','900941','900942','900943','900945','900946','900947','900948','900949','900950','900951','900952','900953','900955','900956','900957',];
    var stocks=stocks2.slice(900,1200);
    stocks.forEach(function(code){
        gatherer.getHistories(code,function(histories){
            persister.checkOnceAndPersist(code,histories,6000);
        });
        Sleep.usleep(100000);//sleep 100ms
        logger.info("gatherData is sleep in case cause connection reset",code);
    });
    //persister.destroy();
}

gatherData();

